//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 11:03:57 AM CEST 
//


package com.adobe.analytics.domain;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for scheduleFileFormat.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="scheduleFileFormat">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Excel2007"/>
 *     &lt;enumeration value="Excel2003"/>
 *     &lt;enumeration value="Mht"/>
 *     &lt;enumeration value="Xml"/>
 *     &lt;enumeration value="Txt"/>
 *     &lt;enumeration value="Csv"/>
 *     &lt;enumeration value="Pdf"/>
 *     &lt;enumeration value="Mobile"/>
 *     &lt;enumeration value="Html"/>
 *     &lt;enumeration value="Word"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "scheduleFileFormat")
@XmlEnum
public enum ScheduleFileFormat {

    @XmlEnumValue("Excel2007")
    EXCEL_2007("Excel2007"),
    @XmlEnumValue("Excel2003")
    EXCEL_2003("Excel2003"),
    @XmlEnumValue("Mht")
    MHT("Mht"),
    @XmlEnumValue("Xml")
    XML("Xml"),
    @XmlEnumValue("Txt")
    TXT("Txt"),
    @XmlEnumValue("Csv")
    CSV("Csv"),
    @XmlEnumValue("Pdf")
    PDF("Pdf"),
    @XmlEnumValue("Mobile")
    MOBILE("Mobile"),
    @XmlEnumValue("Html")
    HTML("Html"),
    @XmlEnumValue("Word")
    WORD("Word");
    private final String value;

    ScheduleFileFormat(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ScheduleFileFormat fromValue(String v) {
        for (ScheduleFileFormat c: ScheduleFileFormat.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
