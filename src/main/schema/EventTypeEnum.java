//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 11:03:57 AM CEST 
//


package com.adobe.analytics.domain;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for event_type_enum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="event_type_enum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="disabled"/>
 *     &lt;enumeration value="counter_no_subrelations"/>
 *     &lt;enumeration value="counter"/>
 *     &lt;enumeration value="currency_no_subrelations"/>
 *     &lt;enumeration value="currency"/>
 *     &lt;enumeration value="numeric_no_subrelations"/>
 *     &lt;enumeration value="numeric"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "event_type_enum")
@XmlEnum
public enum EventTypeEnum {

    @XmlEnumValue("disabled")
    DISABLED("disabled"),
    @XmlEnumValue("counter_no_subrelations")
    COUNTER_NO_SUBRELATIONS("counter_no_subrelations"),
    @XmlEnumValue("counter")
    COUNTER("counter"),
    @XmlEnumValue("currency_no_subrelations")
    CURRENCY_NO_SUBRELATIONS("currency_no_subrelations"),
    @XmlEnumValue("currency")
    CURRENCY("currency"),
    @XmlEnumValue("numeric_no_subrelations")
    NUMERIC_NO_SUBRELATIONS("numeric_no_subrelations"),
    @XmlEnumValue("numeric")
    NUMERIC("numeric");
    private final String value;

    EventTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static EventTypeEnum fromValue(String v) {
        for (EventTypeEnum c: EventTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
